(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{146:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"一个基于egret的mvc架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个基于egret的mvc架构","aria-hidden":"true"}},[e._v("#")]),e._v(" 一个基于egret的MVC架构")]),e._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景","aria-hidden":"true"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),a("p",[e._v("前不久公司转战微信小游戏，于是做了一款放置类的休闲游戏，急急急忙忙的赶上了线，由于微信政策原因，分享功能被封。于是团队整体慢下来思考总结了一些问题，调整了产品策略。作为技术端的也有时间来梳理一下之前的架构问题。\n在项目时间紧的情况下还要边学边做，这些都可以是项目结构混乱的借口。但仔细思考反思后，还是自身的技术功底的问题。纸上得来终觉浅，MVC的概念从入行开始就听到烂，从之前J2EE的SSH和SSM的MVC到VUE的MVVM，框架已经帮你把设计模式封装好，你只需要CTRL+C和CTRL+V，照着模板敲业务，然后感叹真爽，知道了设计模式带来的好处，但没有深刻的理解。直到入坑了egret。")]),e._v(" "),a("h2",{attrs:{id:"before"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before","aria-hidden":"true"}},[e._v("#")]),e._v(" before")]),e._v(" "),a("p",[e._v("egret是flasher的福音，Api和flash高度保持一致，然而业务里不用操作dom，取而代之的是一个个显示对象。需求一出照着官方的示例每个页面用编辑器布局一个exml，然后写一个类继承eui.component，请求数据后，用exml里的id去操作更新对应的显示对象。要显示页面的时候在父容器里直接addchild，很是方便快捷。\n但当业务逐渐复杂，变更越来越多的时候，笑容渐渐失去。请求数据和视图更新的操作都在component里，请求的数据多视图更新成了问题，共享的数据不好管理，而且某个视图导致数据更新你要通知其他视图简直是噩梦，之前概念里设计模式要解决的问题全部暴露出来了。")]),e._v(" "),a("h2",{attrs:{id:"改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改进","aria-hidden":"true"}},[e._v("#")]),e._v(" 改进")]),e._v(" "),a("p",[e._v("大规模重构不现实，需求还在催，项目要赶时间上线。于是只能是在现在基础上看能不能先解决部分问题。")]),e._v(" "),a("h3",{attrs:{id:"组件之间的通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件之间的通信","aria-hidden":"true"}},[e._v("#")]),e._v(" 组件之间的通信")]),e._v(" "),a("p",[e._v("之前用Vue的时候有个eventbus的方案，解决不用Vuex来实现组件之间通信。想了想egret本身实现了eventbus的功能，只需要new一个eventdispatcher暴露出来供所有组件使用就行。")]),e._v(" "),a("h3",{attrs:{id:"共享数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 共享数据")]),e._v(" "),a("p",[e._v("将共享数据抽出来放在一个静态的类里面，提供数据的getter和setter，在setter的时候用eventbus dispatch一个事件，在用到数据的地方用eventbus监听这个事件，然后在回调里处理视图更新。")]),e._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[e._v("#")])])])}],!1,null,null,null);s.options.__file="MVC.md";t.default=s.exports}}]);